//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SpyMaster {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsQ : DataSet {
        
        private Agent_SpecialtyDataTable tableAgent_Specialty;
        
        private AssignmentsDataTable tableAssignments;
        
        public dsQ() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsQ(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Agent_Specialty"] != null)) {
                    this.Tables.Add(new Agent_SpecialtyDataTable(ds.Tables["Agent_Specialty"]));
                }
                if ((ds.Tables["Assignments"] != null)) {
                    this.Tables.Add(new AssignmentsDataTable(ds.Tables["Assignments"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Agent_SpecialtyDataTable Agent_Specialty {
            get {
                return this.tableAgent_Specialty;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssignmentsDataTable Assignments {
            get {
                return this.tableAssignments;
            }
        }
        
        public override DataSet Clone() {
            dsQ cln = ((dsQ)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Agent_Specialty"] != null)) {
                this.Tables.Add(new Agent_SpecialtyDataTable(ds.Tables["Agent_Specialty"]));
            }
            if ((ds.Tables["Assignments"] != null)) {
                this.Tables.Add(new AssignmentsDataTable(ds.Tables["Assignments"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAgent_Specialty = ((Agent_SpecialtyDataTable)(this.Tables["Agent_Specialty"]));
            if ((this.tableAgent_Specialty != null)) {
                this.tableAgent_Specialty.InitVars();
            }
            this.tableAssignments = ((AssignmentsDataTable)(this.Tables["Assignments"]));
            if ((this.tableAssignments != null)) {
                this.tableAssignments.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsQ";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsQ.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAgent_Specialty = new Agent_SpecialtyDataTable();
            this.Tables.Add(this.tableAgent_Specialty);
            this.tableAssignments = new AssignmentsDataTable();
            this.Tables.Add(this.tableAssignments);
        }
        
        private bool ShouldSerializeAgent_Specialty() {
            return false;
        }
        
        private bool ShouldSerializeAssignments() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Agent_SpecialtyRowChangeEventHandler(object sender, Agent_SpecialtyRowChangeEvent e);
        
        public delegate void AssignmentsRowChangeEventHandler(object sender, AssignmentsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Agent_SpecialtyDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAgent_SpecialtyID;
            
            private DataColumn columnAgentID;
            
            private DataColumn columnSpecialtyID;
            
            internal Agent_SpecialtyDataTable() : 
                    base("Agent_Specialty") {
                this.InitClass();
            }
            
            internal Agent_SpecialtyDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Agent_SpecialtyIDColumn {
                get {
                    return this.columnAgent_SpecialtyID;
                }
            }
            
            internal DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            internal DataColumn SpecialtyIDColumn {
                get {
                    return this.columnSpecialtyID;
                }
            }
            
            public Agent_SpecialtyRow this[int index] {
                get {
                    return ((Agent_SpecialtyRow)(this.Rows[index]));
                }
            }
            
            public event Agent_SpecialtyRowChangeEventHandler Agent_SpecialtyRowChanged;
            
            public event Agent_SpecialtyRowChangeEventHandler Agent_SpecialtyRowChanging;
            
            public event Agent_SpecialtyRowChangeEventHandler Agent_SpecialtyRowDeleted;
            
            public event Agent_SpecialtyRowChangeEventHandler Agent_SpecialtyRowDeleting;
            
            public void AddAgent_SpecialtyRow(Agent_SpecialtyRow row) {
                this.Rows.Add(row);
            }
            
            public Agent_SpecialtyRow AddAgent_SpecialtyRow(int Agent_SpecialtyID, int AgentID, int SpecialtyID) {
                Agent_SpecialtyRow rowAgent_SpecialtyRow = ((Agent_SpecialtyRow)(this.NewRow()));
                rowAgent_SpecialtyRow.ItemArray = new object[] {
                        Agent_SpecialtyID,
                        AgentID,
                        SpecialtyID};
                this.Rows.Add(rowAgent_SpecialtyRow);
                return rowAgent_SpecialtyRow;
            }
            
            public Agent_SpecialtyRow FindByAgent_SpecialtyID(int Agent_SpecialtyID) {
                return ((Agent_SpecialtyRow)(this.Rows.Find(new object[] {
                            Agent_SpecialtyID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Agent_SpecialtyDataTable cln = ((Agent_SpecialtyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnAgent_SpecialtyID = this.Columns["Agent_SpecialtyID"];
                this.columnAgentID = this.Columns["AgentID"];
                this.columnSpecialtyID = this.Columns["SpecialtyID"];
            }
            
            private void InitClass() {
                this.columnAgent_SpecialtyID = new DataColumn("Agent_SpecialtyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgent_SpecialtyID);
                this.columnAgentID = new DataColumn("AgentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgentID);
                this.columnSpecialtyID = new DataColumn("SpecialtyID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSpecialtyID);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAgent_SpecialtyID}, true));
                this.columnAgent_SpecialtyID.AllowDBNull = false;
                this.columnAgent_SpecialtyID.Unique = true;
                this.columnAgentID.AllowDBNull = false;
                this.columnSpecialtyID.AllowDBNull = false;
            }
            
            public Agent_SpecialtyRow NewAgent_SpecialtyRow() {
                return ((Agent_SpecialtyRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Agent_SpecialtyRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Agent_SpecialtyRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Agent_SpecialtyRowChanged != null)) {
                    this.Agent_SpecialtyRowChanged(this, new Agent_SpecialtyRowChangeEvent(((Agent_SpecialtyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Agent_SpecialtyRowChanging != null)) {
                    this.Agent_SpecialtyRowChanging(this, new Agent_SpecialtyRowChangeEvent(((Agent_SpecialtyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Agent_SpecialtyRowDeleted != null)) {
                    this.Agent_SpecialtyRowDeleted(this, new Agent_SpecialtyRowChangeEvent(((Agent_SpecialtyRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Agent_SpecialtyRowDeleting != null)) {
                    this.Agent_SpecialtyRowDeleting(this, new Agent_SpecialtyRowChangeEvent(((Agent_SpecialtyRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgent_SpecialtyRow(Agent_SpecialtyRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Agent_SpecialtyRow : DataRow {
            
            private Agent_SpecialtyDataTable tableAgent_Specialty;
            
            internal Agent_SpecialtyRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgent_Specialty = ((Agent_SpecialtyDataTable)(this.Table));
            }
            
            public int Agent_SpecialtyID {
                get {
                    return ((int)(this[this.tableAgent_Specialty.Agent_SpecialtyIDColumn]));
                }
                set {
                    this[this.tableAgent_Specialty.Agent_SpecialtyIDColumn] = value;
                }
            }
            
            public int AgentID {
                get {
                    return ((int)(this[this.tableAgent_Specialty.AgentIDColumn]));
                }
                set {
                    this[this.tableAgent_Specialty.AgentIDColumn] = value;
                }
            }
            
            public int SpecialtyID {
                get {
                    return ((int)(this[this.tableAgent_Specialty.SpecialtyIDColumn]));
                }
                set {
                    this[this.tableAgent_Specialty.SpecialtyIDColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Agent_SpecialtyRowChangeEvent : EventArgs {
            
            private Agent_SpecialtyRow eventRow;
            
            private DataRowAction eventAction;
            
            public Agent_SpecialtyRowChangeEvent(Agent_SpecialtyRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Agent_SpecialtyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssignmentsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAssignmentID;
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLocation;
            
            internal AssignmentsDataTable() : 
                    base("Assignments") {
                this.InitClass();
            }
            
            internal AssignmentsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AssignmentIDColumn {
                get {
                    return this.columnAssignmentID;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            public AssignmentsRow this[int index] {
                get {
                    return ((AssignmentsRow)(this.Rows[index]));
                }
            }
            
            public event AssignmentsRowChangeEventHandler AssignmentsRowChanged;
            
            public event AssignmentsRowChangeEventHandler AssignmentsRowChanging;
            
            public event AssignmentsRowChangeEventHandler AssignmentsRowDeleted;
            
            public event AssignmentsRowChangeEventHandler AssignmentsRowDeleting;
            
            public void AddAssignmentsRow(AssignmentsRow row) {
                this.Rows.Add(row);
            }
            
            public AssignmentsRow AddAssignmentsRow(int AssignmentID, string Name, string Description, string Location) {
                AssignmentsRow rowAssignmentsRow = ((AssignmentsRow)(this.NewRow()));
                rowAssignmentsRow.ItemArray = new object[] {
                        AssignmentID,
                        Name,
                        Description,
                        Location};
                this.Rows.Add(rowAssignmentsRow);
                return rowAssignmentsRow;
            }
            
            public AssignmentsRow FindByAssignmentID(int AssignmentID) {
                return ((AssignmentsRow)(this.Rows.Find(new object[] {
                            AssignmentID})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                AssignmentsDataTable cln = ((AssignmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnAssignmentID = this.Columns["AssignmentID"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnLocation = this.Columns["Location"];
            }
            
            private void InitClass() {
                this.columnAssignmentID = new DataColumn("AssignmentID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssignmentID);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLocation = new DataColumn("Location", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocation);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnAssignmentID}, true));
                this.columnAssignmentID.AllowDBNull = false;
                this.columnAssignmentID.Unique = true;
            }
            
            public AssignmentsRow NewAssignmentsRow() {
                return ((AssignmentsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new AssignmentsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(AssignmentsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssignmentsRowChanged != null)) {
                    this.AssignmentsRowChanged(this, new AssignmentsRowChangeEvent(((AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssignmentsRowChanging != null)) {
                    this.AssignmentsRowChanging(this, new AssignmentsRowChangeEvent(((AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssignmentsRowDeleted != null)) {
                    this.AssignmentsRowDeleted(this, new AssignmentsRowChangeEvent(((AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssignmentsRowDeleting != null)) {
                    this.AssignmentsRowDeleting(this, new AssignmentsRowChangeEvent(((AssignmentsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAssignmentsRow(AssignmentsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssignmentsRow : DataRow {
            
            private AssignmentsDataTable tableAssignments;
            
            internal AssignmentsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssignments = ((AssignmentsDataTable)(this.Table));
            }
            
            public int AssignmentID {
                get {
                    return ((int)(this[this.tableAssignments.AssignmentIDColumn]));
                }
                set {
                    this[this.tableAssignments.AssignmentIDColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAssignments.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssignments.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableAssignments.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssignments.DescriptionColumn] = value;
                }
            }
            
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableAssignments.LocationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssignments.LocationColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableAssignments.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableAssignments.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableAssignments.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableAssignments.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationNull() {
                return this.IsNull(this.tableAssignments.LocationColumn);
            }
            
            public void SetLocationNull() {
                this[this.tableAssignments.LocationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class AssignmentsRowChangeEvent : EventArgs {
            
            private AssignmentsRow eventRow;
            
            private DataRowAction eventAction;
            
            public AssignmentsRowChangeEvent(AssignmentsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public AssignmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
