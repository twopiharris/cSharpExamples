//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3328.4
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ViewDemo {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class theData : DataSet {
        
        private Agent_AssignmentDataTable tableAgent_Assignment;
        
        public theData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected theData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Agent_Assignment"] != null)) {
                    this.Tables.Add(new Agent_AssignmentDataTable(ds.Tables["Agent_Assignment"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Agent_AssignmentDataTable Agent_Assignment {
            get {
                return this.tableAgent_Assignment;
            }
        }
        
        public override DataSet Clone() {
            theData cln = ((theData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Agent_Assignment"] != null)) {
                this.Tables.Add(new Agent_AssignmentDataTable(ds.Tables["Agent_Assignment"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableAgent_Assignment = ((Agent_AssignmentDataTable)(this.Tables["Agent_Assignment"]));
            if ((this.tableAgent_Assignment != null)) {
                this.tableAgent_Assignment.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "theData";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/theData.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableAgent_Assignment = new Agent_AssignmentDataTable();
            this.Tables.Add(this.tableAgent_Assignment);
        }
        
        private bool ShouldSerializeAgent_Assignment() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Agent_AssignmentRowChangeEventHandler(object sender, Agent_AssignmentRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Agent_AssignmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCodeName;
            
            private DataColumn columnName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnLocation;
            
            internal Agent_AssignmentDataTable() : 
                    base("Agent_Assignment") {
                this.InitClass();
            }
            
            internal Agent_AssignmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CodeNameColumn {
                get {
                    return this.columnCodeName;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            public Agent_AssignmentRow this[int index] {
                get {
                    return ((Agent_AssignmentRow)(this.Rows[index]));
                }
            }
            
            public event Agent_AssignmentRowChangeEventHandler Agent_AssignmentRowChanged;
            
            public event Agent_AssignmentRowChangeEventHandler Agent_AssignmentRowChanging;
            
            public event Agent_AssignmentRowChangeEventHandler Agent_AssignmentRowDeleted;
            
            public event Agent_AssignmentRowChangeEventHandler Agent_AssignmentRowDeleting;
            
            public void AddAgent_AssignmentRow(Agent_AssignmentRow row) {
                this.Rows.Add(row);
            }
            
            public Agent_AssignmentRow AddAgent_AssignmentRow(string CodeName, string Name, string Description, string Location) {
                Agent_AssignmentRow rowAgent_AssignmentRow = ((Agent_AssignmentRow)(this.NewRow()));
                rowAgent_AssignmentRow.ItemArray = new object[] {
                        CodeName,
                        Name,
                        Description,
                        Location};
                this.Rows.Add(rowAgent_AssignmentRow);
                return rowAgent_AssignmentRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Agent_AssignmentDataTable cln = ((Agent_AssignmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            internal void InitVars() {
                this.columnCodeName = this.Columns["CodeName"];
                this.columnName = this.Columns["Name"];
                this.columnDescription = this.Columns["Description"];
                this.columnLocation = this.Columns["Location"];
            }
            
            private void InitClass() {
                this.columnCodeName = new DataColumn("CodeName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCodeName);
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnLocation = new DataColumn("Location", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocation);
            }
            
            public Agent_AssignmentRow NewAgent_AssignmentRow() {
                return ((Agent_AssignmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Agent_AssignmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Agent_AssignmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Agent_AssignmentRowChanged != null)) {
                    this.Agent_AssignmentRowChanged(this, new Agent_AssignmentRowChangeEvent(((Agent_AssignmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Agent_AssignmentRowChanging != null)) {
                    this.Agent_AssignmentRowChanging(this, new Agent_AssignmentRowChangeEvent(((Agent_AssignmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Agent_AssignmentRowDeleted != null)) {
                    this.Agent_AssignmentRowDeleted(this, new Agent_AssignmentRowChangeEvent(((Agent_AssignmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Agent_AssignmentRowDeleting != null)) {
                    this.Agent_AssignmentRowDeleting(this, new Agent_AssignmentRowChangeEvent(((Agent_AssignmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveAgent_AssignmentRow(Agent_AssignmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Agent_AssignmentRow : DataRow {
            
            private Agent_AssignmentDataTable tableAgent_Assignment;
            
            internal Agent_AssignmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgent_Assignment = ((Agent_AssignmentDataTable)(this.Table));
            }
            
            public string CodeName {
                get {
                    try {
                        return ((string)(this[this.tableAgent_Assignment.CodeNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent_Assignment.CodeNameColumn] = value;
                }
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableAgent_Assignment.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent_Assignment.NameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableAgent_Assignment.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent_Assignment.DescriptionColumn] = value;
                }
            }
            
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableAgent_Assignment.LocationColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent_Assignment.LocationColumn] = value;
                }
            }
            
            public bool IsCodeNameNull() {
                return this.IsNull(this.tableAgent_Assignment.CodeNameColumn);
            }
            
            public void SetCodeNameNull() {
                this[this.tableAgent_Assignment.CodeNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableAgent_Assignment.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableAgent_Assignment.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableAgent_Assignment.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableAgent_Assignment.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocationNull() {
                return this.IsNull(this.tableAgent_Assignment.LocationColumn);
            }
            
            public void SetLocationNull() {
                this[this.tableAgent_Assignment.LocationColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Agent_AssignmentRowChangeEvent : EventArgs {
            
            private Agent_AssignmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public Agent_AssignmentRowChangeEvent(Agent_AssignmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Agent_AssignmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
